// The hero is (implicitly) full-bleed, and the container is full-bleed
// vertically. Vertical rhythm is generally applied loosely within the hero,
// though the entire hero should not be disruptive.
#hero {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;

  .container {
    @extends .live-area;
    full-bleed(vertical);

    display: flex;
    flex-flow: row wrap;
  }
}

// The overall presentation for #content should generally
// be minimal, such that the style of its parent (usually
// `main > article`) shows through.
#content {
  @extend .live-area
  full-bleed();

  @media multi-column {
    @extends .live-area;
    full-bleed(vertical);

    // and we flow the content inside it, mostly so we can have factored sizing
    // and reordering.
    display: flex;
    flex-flow: row wrap;

    // stick blocks to the top of the container
    align-content: flex-start;
  }
}

// Main and asides make up a majority of the content
// on a given page. Asides' children should be limited
// to <aside> elements. Main's children are generally
// <section> elements, but not always.
// Structurally main comes before asides, as that is
// natural order on small screens. Visually asides
// move in front of main when space permits them to
// be placed side-by-side.

#main,
#asides aside {
  display: flex;
  flex-wrap: wrap;

  & > * {
    width: 100%;
    @extends .live-area;
    full-bleed(vertical);

    @media multi-column {
      // full-bleed();
    }
  }

  & > section {
    flex: 1 auto;

    &.ng-leave {
      transition: all 0.2s;
      transform-origin: center top;

      &.ng-leave-active {
        transform: scale(0.5);
        opacity: 0;
      }
    }

    & + section {
      // border-top: 1px solid offwhite;
      // margin-top: $measure * 2;
    }

    &:last-child {
      // margin-bottom: $measure * 1;
    }
  }
}

#main {
  min-width: 300px;

  @media multi-column {
    // Move it after the asides
    order: 2;

    // let it stretch to fill the area to a factor of 5
    flex: 5 5 0px;

    // stretch to be as tall as the sidebar if the sidebar is naturally taller
    align-self: stretch;

    // stick sections to the top of the block if this has been stretched to
    // match the height of the sidebar
    align-content: flex-start;

    background-color: content-fill-color;
  }
}

#asides {
  padding-top: 1.5rem;
  min-width: 250px;

  @media multi-column {
    padding-top: 0;

    // move it before the main column
    order: 1;

    // allow it to stretch horizontally by a factor of 2
    flex: 2 2 0px;
    max-width: 280px;

    // spacing between the main content and the sidebar. Put on the sidebar
    // as some pages have only main content.
    margin-right: column-spacing;

    // each block of sidebar content is a white box with 20px above
    aside {
      margin-top: section-spacing;

      section {
        background-color: content-fill-color;
      }

      // except the first one, which has no space above
      &:first-child {
        margin-top: 0;
      }
    }
  }
}
